// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.earth.testomania.skills.general.dto

import com.earth.testomania.skills.dto.GeneralTestItemDTO
import com.earth.testomania.skills.dto.OptionDTO
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class GeneralTestItemDTOJsonAdapter(
  moshi: Moshi
) : JsonAdapter<GeneralTestItemDTO>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "options", "ordering",
      "question", "test_id")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val listOfOptionDTOAdapter: JsonAdapter<List<OptionDTO>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, OptionDTO::class.java), emptySet(),
      "options")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "question")

  public override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("GeneralTestItemDTO").append(')') }

  public override fun fromJson(reader: JsonReader): GeneralTestItemDTO {
    var id: Int? = null
    var options_: List<OptionDTO>? = null
    var ordering: Int? = null
    var question: String? = null
    var test_id: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> options_ = listOfOptionDTOAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("options_", "options", reader)
        2 -> ordering = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ordering",
            "ordering", reader)
        3 -> question = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("question",
            "question", reader)
        4 -> test_id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("test_id",
            "test_id", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return GeneralTestItemDTO(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        options = options_ ?: throw Util.missingProperty("options_", "options", reader),
        ordering = ordering ?: throw Util.missingProperty("ordering", "ordering", reader),
        question = question ?: throw Util.missingProperty("question", "question", reader),
        test_id = test_id ?: throw Util.missingProperty("test_id", "test_id", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: GeneralTestItemDTO?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value_.id)
    writer.name("options")
    listOfOptionDTOAdapter.toJson(writer, value_.options)
    writer.name("ordering")
    intAdapter.toJson(writer, value_.ordering)
    writer.name("question")
    stringAdapter.toJson(writer, value_.question)
    writer.name("test_id")
    intAdapter.toJson(writer, value_.test_id)
    writer.endObject()
  }
}
