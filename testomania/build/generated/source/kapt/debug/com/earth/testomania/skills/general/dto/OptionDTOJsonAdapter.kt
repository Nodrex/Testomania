// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.earth.testomania.skills.general.dto

import com.earth.testomania.skills.dto.OptionDTO
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class OptionDTOJsonAdapter(
  moshi: Moshi
) : JsonAdapter<OptionDTO>() {
  private val options: JsonReader.Options = JsonReader.Options.of("correct", "id", "option",
      "question_id")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "correct")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "option")

  public override fun toString(): String = buildString(31) {
      append("GeneratedJsonAdapter(").append("OptionDTO").append(')') }

  public override fun fromJson(reader: JsonReader): OptionDTO {
    var correct: Int? = null
    var id: Int? = null
    var option: String? = null
    var question_id: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> correct = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("correct",
            "correct", reader)
        1 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        2 -> option = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("option",
            "option", reader)
        3 -> question_id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("question_id",
            "question_id", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return OptionDTO(
        correct = correct ?: throw Util.missingProperty("correct", "correct", reader),
        id = id ?: throw Util.missingProperty("id", "id", reader),
        option = option ?: throw Util.missingProperty("option", "option", reader),
        question_id = question_id ?: throw Util.missingProperty("question_id", "question_id",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: OptionDTO?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("correct")
    intAdapter.toJson(writer, value_.correct)
    writer.name("id")
    intAdapter.toJson(writer, value_.id)
    writer.name("option")
    stringAdapter.toJson(writer, value_.option)
    writer.name("question_id")
    intAdapter.toJson(writer, value_.question_id)
    writer.endObject()
  }
}
